/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IModAllocatorInterface extends utils.Interface {
  contractName: "IModAllocator";
  functions: {
    "allocate(uint256,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allocate",
    values: [BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "allocate", data: BytesLike): Result;

  events: {
    "Allocate(uint256,uint256,address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Allocate"): EventFragment;
}

export type AllocateEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, string],
  {
    projectId: BigNumber;
    forProjectId: BigNumber;
    beneficiary: string;
    amount: BigNumber;
    caller: string;
  }
>;

export type AllocateEventFilter = TypedEventFilter<AllocateEvent>;

export interface IModAllocator extends BaseContract {
  contractName: "IModAllocator";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IModAllocatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allocate(
      _projectId: BigNumberish,
      _forProjectId: BigNumberish,
      _beneficiary: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allocate(
    _projectId: BigNumberish,
    _forProjectId: BigNumberish,
    _beneficiary: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allocate(
      _projectId: BigNumberish,
      _forProjectId: BigNumberish,
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Allocate(uint256,uint256,address,uint256,address)"(
      projectId?: BigNumberish | null,
      forProjectId?: BigNumberish | null,
      beneficiary?: string | null,
      amount?: null,
      caller?: null
    ): AllocateEventFilter;
    Allocate(
      projectId?: BigNumberish | null,
      forProjectId?: BigNumberish | null,
      beneficiary?: string | null,
      amount?: null,
      caller?: null
    ): AllocateEventFilter;
  };

  estimateGas: {
    allocate(
      _projectId: BigNumberish,
      _forProjectId: BigNumberish,
      _beneficiary: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allocate(
      _projectId: BigNumberish,
      _forProjectId: BigNumberish,
      _beneficiary: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
