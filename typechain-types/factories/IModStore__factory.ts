/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { IModStore, IModStoreInterface } from "../IModStore";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "projectId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "configuration",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "preferUnstaked",
            type: "bool",
          },
          {
            internalType: "uint16",
            name: "percent",
            type: "uint16",
          },
          {
            internalType: "uint48",
            name: "lockedUntil",
            type: "uint48",
          },
          {
            internalType: "address payable",
            name: "beneficiary",
            type: "address",
          },
          {
            internalType: "contract IModAllocator",
            name: "allocator",
            type: "address",
          },
          {
            internalType: "uint56",
            name: "projectId",
            type: "uint56",
          },
        ],
        indexed: false,
        internalType: "struct PayoutMod",
        name: "mods",
        type: "tuple",
      },
      {
        indexed: false,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "SetPayoutMod",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "projectId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "configuration",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "preferUnstaked",
            type: "bool",
          },
          {
            internalType: "uint16",
            name: "percent",
            type: "uint16",
          },
          {
            internalType: "uint48",
            name: "lockedUntil",
            type: "uint48",
          },
          {
            internalType: "address payable",
            name: "beneficiary",
            type: "address",
          },
        ],
        indexed: false,
        internalType: "struct TicketMod",
        name: "mods",
        type: "tuple",
      },
      {
        indexed: false,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "SetTicketMod",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_projectId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_configuration",
        type: "uint256",
      },
    ],
    name: "payoutModsOf",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "preferUnstaked",
            type: "bool",
          },
          {
            internalType: "uint16",
            name: "percent",
            type: "uint16",
          },
          {
            internalType: "uint48",
            name: "lockedUntil",
            type: "uint48",
          },
          {
            internalType: "address payable",
            name: "beneficiary",
            type: "address",
          },
          {
            internalType: "contract IModAllocator",
            name: "allocator",
            type: "address",
          },
          {
            internalType: "uint56",
            name: "projectId",
            type: "uint56",
          },
        ],
        internalType: "struct PayoutMod[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "projects",
    outputs: [
      {
        internalType: "contract IProjects",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_projectId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_configuration",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "preferUnstaked",
            type: "bool",
          },
          {
            internalType: "uint16",
            name: "percent",
            type: "uint16",
          },
          {
            internalType: "uint48",
            name: "lockedUntil",
            type: "uint48",
          },
          {
            internalType: "address payable",
            name: "beneficiary",
            type: "address",
          },
          {
            internalType: "contract IModAllocator",
            name: "allocator",
            type: "address",
          },
          {
            internalType: "uint56",
            name: "projectId",
            type: "uint56",
          },
        ],
        internalType: "struct PayoutMod[]",
        name: "_mods",
        type: "tuple[]",
      },
    ],
    name: "setPayoutMods",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_projectId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_configuration",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "preferUnstaked",
            type: "bool",
          },
          {
            internalType: "uint16",
            name: "percent",
            type: "uint16",
          },
          {
            internalType: "uint48",
            name: "lockedUntil",
            type: "uint48",
          },
          {
            internalType: "address payable",
            name: "beneficiary",
            type: "address",
          },
        ],
        internalType: "struct TicketMod[]",
        name: "_mods",
        type: "tuple[]",
      },
    ],
    name: "setTicketMods",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_projectId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_configuration",
        type: "uint256",
      },
    ],
    name: "ticketModsOf",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "preferUnstaked",
            type: "bool",
          },
          {
            internalType: "uint16",
            name: "percent",
            type: "uint16",
          },
          {
            internalType: "uint48",
            name: "lockedUntil",
            type: "uint48",
          },
          {
            internalType: "address payable",
            name: "beneficiary",
            type: "address",
          },
        ],
        internalType: "struct TicketMod[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

export class IModStore__factory {
  static readonly abi = _abi;
  static createInterface(): IModStoreInterface {
    return new utils.Interface(_abi) as IModStoreInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IModStore {
    return new Contract(address, _abi, signerOrProvider) as IModStore;
  }
}
