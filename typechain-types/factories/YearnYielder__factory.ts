/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { YearnYielder, YearnYielderInterface } from "../YearnYielder";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_weth",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "denominator",
        type: "uint256",
      },
    ],
    name: "PRBMath__MulDivOverflow",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposited",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "updateApproval",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "weth",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wethVault",
    outputs: [
      {
        internalType: "contract IyVaultV2",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "address payable",
        name: "_beneficiary",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_beneficiary",
        type: "address",
      },
    ],
    name: "withdrawAll",
    outputs: [
      {
        internalType: "uint256",
        name: "_balance",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600180546001600160a01b03191673a9fe4601811213c340e850ea305481aff02f5b2817905560006003553480156200003c57600080fd5b50604051620015e0380380620015e08339810160408190526200005f916200060d565b6200006a33620001cc565b60015460408051637e062a3560e11b815290516001600160a01b0380851693169163fc0c546a9160048083019260209291908290030181865afa158015620000b6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000dc91906200060d565b6001600160a01b031614620001385760405162461bcd60e51b815260206004820152601a60248201527f596561726e5969656c6465723a20494e434f4d50415449424c4500000000000060448201526064015b60405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040805163313ce56760e01b8152905163313ce567916004808201926020929091908290030181865afa15801562000192573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001b8919062000638565b600455620001c56200021c565b50620006fc565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60015460025462000249916001600160a01b0391821691166000196200024b602090811b6200063c17901c565b565b801580620002c95750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015620002a1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002c7919062000638565b155b6200033d5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016200012f565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620003959185916200039a16565b505050565b6000620003f6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166200047860201b62000773179092919060201c565b80519091501562000395578080602001905181019062000417919062000652565b620003955760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016200012f565b606062000489848460008562000493565b90505b9392505050565b606082471015620004f65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016200012f565b6001600160a01b0385163b6200054f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016200012f565b600080866001600160a01b031685876040516200056d9190620006a9565b60006040518083038185875af1925050503d8060008114620005ac576040519150601f19603f3d011682016040523d82523d6000602084013e620005b1565b606091505b509092509050620005c4828286620005cf565b979650505050505050565b60608315620005e05750816200048c565b825115620005f15782518084602001fd5b8160405162461bcd60e51b81526004016200012f9190620006c7565b6000602082840312156200062057600080fd5b81516001600160a01b03811681146200048c57600080fd5b6000602082840312156200064b57600080fd5b5051919050565b6000602082840312156200066557600080fd5b815180151581146200048c57600080fd5b60005b838110156200069357818101518382015260200162000679565b83811115620006a3576000848401525b50505050565b60008251620006bd81846020870162000676565b9190910192915050565b6020815260008251806020840152620006e881604085016020870162000676565b601f01601f19169190910160400192915050565b610ed4806200070c6000396000f3fe6080604052600436106100a65760003560e01c8063be93981f11610064578063be93981f14610176578063d0e30db014610196578063eef49ee31461019e578063f2fde38b146101b4578063f926197e146101d4578063fa09e630146101e957600080fd5b8062f714ce146100ab578063313ce567146100cd5780633fc8cef3146100f6578063715018a61461012e5780638da5cb5b14610143578063a574971014610161575b600080fd5b3480156100b757600080fd5b506100cb6100c6366004610c17565b610209565b005b3480156100d957600080fd5b506100e360045481565b6040519081526020015b60405180910390f35b34801561010257600080fd5b50600254610116906001600160a01b031681565b6040516001600160a01b0390911681526020016100ed565b34801561013a57600080fd5b506100cb610375565b34801561014f57600080fd5b506000546001600160a01b0316610116565b34801561016d57600080fd5b506100e36103ab565b34801561018257600080fd5b50600154610116906001600160a01b031681565b6100cb610428565b3480156101aa57600080fd5b506100e360035481565b3480156101c057600080fd5b506100cb6101cf366004610c47565b61053e565b3480156101e057600080fd5b506100cb6105d9565b3480156101f557600080fd5b506100e3610204366004610c47565b6105f8565b6000546001600160a01b0316331461023c5760405162461bcd60e51b815260040161023390610c64565b60405180910390fd5b6102508260035461024b6103ab565b61078c565b60035461025d9190610caf565b6003556001546001600160a01b0316632e1a7d4d61027a84610859565b6040518263ffffffff1660e01b815260040161029891815260200190565b6020604051808303816000875af11580156102b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102db9190610cc6565b50600254604051632e1a7d4d60e01b8152600481018490526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561032257600080fd5b505af1158015610336573d6000803e3d6000fd5b50506040516001600160a01b038416925084156108fc02915084906000818181858888f19350505050158015610370573d6000803e3d6000fd5b505050565b6000546001600160a01b0316331461039f5760405162461bcd60e51b815260040161023390610c64565b6103a960006108eb565b565b6001546040516370a0823160e01b8152306004820152600091610423916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156103fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041e9190610cc6565b61093b565b905090565b6000546001600160a01b031633146104525760405162461bcd60e51b815260040161023390610c64565b600260009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156104a257600080fd5b505af11580156104b6573d6000803e3d6000fd5b505060015460405163b6b55f2560e01b81523460048201526001600160a01b03909116935063b6b55f25925060240190506020604051808303816000875af1158015610506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052a9190610cc6565b50346003546105399190610cdf565b600355565b6000546001600160a01b031633146105685760405162461bcd60e51b815260040161023390610c64565b6001600160a01b0381166105cd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610233565b6105d6816108eb565b50565b6001546002546103a9916001600160a01b03918216911660001961063c565b600080546001600160a01b031633146106235760405162461bcd60e51b815260040161023390610c64565b61062b6103ab565b90506106378183610209565b919050565b8015806106b65750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015610690573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b49190610cc6565b155b6107215760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610233565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526103709084906109c6565b60606107828484600085610a98565b90505b9392505050565b60008080600019858709858702925082811083820303915050806000036107c6578382816107bc576107bc610cf7565b0492505050610785565b8381106107f057604051631dcf306360e21b81526004810182905260248101859052604401610233565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b60006108e582600454600a61086e9190610df1565b600160009054906101000a90046001600160a01b03166001600160a01b03166399530b066040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108c1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024b9190610cc6565b92915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006108e582600160009054906101000a90046001600160a01b03166001600160a01b03166399530b066040518163ffffffff1660e01b8152600401602060405180830381865afa158015610994573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b89190610cc6565b60045461024b90600a610df1565b6000610a1b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166107739092919063ffffffff16565b8051909150156103705780806020019051810190610a399190610dfd565b6103705760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610233565b606082471015610af95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610233565b6001600160a01b0385163b610b505760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610233565b600080866001600160a01b03168587604051610b6c9190610e4f565b60006040518083038185875af1925050503d8060008114610ba9576040519150601f19603f3d011682016040523d82523d6000602084013e610bae565b606091505b5091509150610bbe828286610bc9565b979650505050505050565b60608315610bd8575081610785565b825115610be85782518084602001fd5b8160405162461bcd60e51b81526004016102339190610e6b565b6001600160a01b03811681146105d657600080fd5b60008060408385031215610c2a57600080fd5b823591506020830135610c3c81610c02565b809150509250929050565b600060208284031215610c5957600080fd5b813561078581610c02565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015610cc157610cc1610c99565b500390565b600060208284031215610cd857600080fd5b5051919050565b60008219821115610cf257610cf2610c99565b500190565b634e487b7160e01b600052601260045260246000fd5b600181815b80851115610d48578160001904821115610d2e57610d2e610c99565b80851615610d3b57918102915b93841c9390800290610d12565b509250929050565b600082610d5f575060016108e5565b81610d6c575060006108e5565b8160018114610d825760028114610d8c57610da8565b60019150506108e5565b60ff841115610d9d57610d9d610c99565b50506001821b6108e5565b5060208310610133831016604e8410600b8410161715610dcb575081810a6108e5565b610dd58383610d0d565b8060001904821115610de957610de9610c99565b029392505050565b60006107858383610d50565b600060208284031215610e0f57600080fd5b8151801515811461078557600080fd5b60005b83811015610e3a578181015183820152602001610e22565b83811115610e49576000848401525b50505050565b60008251610e61818460208701610e1f565b9190910192915050565b6020815260008251806020840152610e8a816040850160208701610e1f565b601f01601f1916919091016040019291505056fea26469706673582212202e6868f368fd53fc0b6ec22c3826c108d09f7b6331b9192c68d9a2ae9565cc2a64736f6c634300080d0033";

type YearnYielderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: YearnYielderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class YearnYielder__factory extends ContractFactory {
  constructor(...args: YearnYielderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "YearnYielder";
  }

  deploy(
    _weth: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<YearnYielder> {
    return super.deploy(_weth, overrides || {}) as Promise<YearnYielder>;
  }
  getDeployTransaction(
    _weth: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_weth, overrides || {});
  }
  attach(address: string): YearnYielder {
    return super.attach(address) as YearnYielder;
  }
  connect(signer: Signer): YearnYielder__factory {
    return super.connect(signer) as YearnYielder__factory;
  }
  static readonly contractName: "YearnYielder";
  public readonly contractName: "YearnYielder";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): YearnYielderInterface {
    return new utils.Interface(_abi) as YearnYielderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): YearnYielder {
    return new Contract(address, _abi, signerOrProvider) as YearnYielder;
  }
}
