/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IFundsModuleInterface extends utils.Interface {
  contractName: "IFundsModule";
  functions: {
    "balance(address,address)": FunctionFragment;
    "batchReleaseSlicers(address[],address,address,bool)": FunctionFragment;
    "batchWithdraw(address,address[])": FunctionFragment;
    "depositEth(address,uint256)": FunctionFragment;
    "depositTokenFromSlicer(uint256,address,address,uint256,uint256)": FunctionFragment;
    "withdraw(address,address)": FunctionFragment;
    "withdrawOnRelease(uint256,address,address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchReleaseSlicers",
    values: [string[], string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "batchWithdraw",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositEth",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositTokenFromSlicer",
    values: [BigNumberish, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOnRelease",
    values: [BigNumberish, string, string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchReleaseSlicers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositTokenFromSlicer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOnRelease",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IFundsModule extends BaseContract {
  contractName: "IFundsModule";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFundsModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balance(
      account: string,
      currency: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        accountBalance: BigNumber;
        protocolPayment: BigNumber;
      }
    >;

    batchReleaseSlicers(
      slicers: string[],
      account: string,
      currency: string,
      triggerWithdraw: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchWithdraw(
      account: string,
      currencies: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositEth(
      account: string,
      protocolPayment: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositTokenFromSlicer(
      tokenId: BigNumberish,
      account: string,
      currency: string,
      amount: BigNumberish,
      protocolPayment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      account: string,
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawOnRelease(
      tokenId: BigNumberish,
      account: string,
      currency: string,
      amount: BigNumberish,
      protocolPayment: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  balance(
    account: string,
    currency: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      accountBalance: BigNumber;
      protocolPayment: BigNumber;
    }
  >;

  batchReleaseSlicers(
    slicers: string[],
    account: string,
    currency: string,
    triggerWithdraw: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchWithdraw(
    account: string,
    currencies: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositEth(
    account: string,
    protocolPayment: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositTokenFromSlicer(
    tokenId: BigNumberish,
    account: string,
    currency: string,
    amount: BigNumberish,
    protocolPayment: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    account: string,
    currency: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawOnRelease(
    tokenId: BigNumberish,
    account: string,
    currency: string,
    amount: BigNumberish,
    protocolPayment: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balance(
      account: string,
      currency: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        accountBalance: BigNumber;
        protocolPayment: BigNumber;
      }
    >;

    batchReleaseSlicers(
      slicers: string[],
      account: string,
      currency: string,
      triggerWithdraw: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    batchWithdraw(
      account: string,
      currencies: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    depositEth(
      account: string,
      protocolPayment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositTokenFromSlicer(
      tokenId: BigNumberish,
      account: string,
      currency: string,
      amount: BigNumberish,
      protocolPayment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      account: string,
      currency: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawOnRelease(
      tokenId: BigNumberish,
      account: string,
      currency: string,
      amount: BigNumberish,
      protocolPayment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    balance(
      account: string,
      currency: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchReleaseSlicers(
      slicers: string[],
      account: string,
      currency: string,
      triggerWithdraw: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchWithdraw(
      account: string,
      currencies: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositEth(
      account: string,
      protocolPayment: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositTokenFromSlicer(
      tokenId: BigNumberish,
      account: string,
      currency: string,
      amount: BigNumberish,
      protocolPayment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      account: string,
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawOnRelease(
      tokenId: BigNumberish,
      account: string,
      currency: string,
      amount: BigNumberish,
      protocolPayment: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balance(
      account: string,
      currency: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchReleaseSlicers(
      slicers: string[],
      account: string,
      currency: string,
      triggerWithdraw: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchWithdraw(
      account: string,
      currencies: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositEth(
      account: string,
      protocolPayment: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositTokenFromSlicer(
      tokenId: BigNumberish,
      account: string,
      currency: string,
      amount: BigNumberish,
      protocolPayment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      account: string,
      currency: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawOnRelease(
      tokenId: BigNumberish,
      account: string,
      currency: string,
      amount: BigNumberish,
      protocolPayment: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
