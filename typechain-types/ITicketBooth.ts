/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ITicketBoothInterface extends utils.Interface {
  contractName: "ITicketBooth";
  functions: {
    "balanceOf(address,uint256)": FunctionFragment;
    "issue(uint256,string,string)": FunctionFragment;
    "lock(address,uint256,uint256)": FunctionFragment;
    "lockedBalanceBy(address,address,uint256)": FunctionFragment;
    "lockedBalanceOf(address,uint256)": FunctionFragment;
    "print(address,uint256,uint256,bool)": FunctionFragment;
    "projects()": FunctionFragment;
    "redeem(address,uint256,uint256,bool)": FunctionFragment;
    "stake(address,uint256,uint256)": FunctionFragment;
    "stakedBalanceOf(address,uint256)": FunctionFragment;
    "stakedTotalSupplyOf(uint256)": FunctionFragment;
    "ticketsOf(uint256)": FunctionFragment;
    "totalSupplyOf(uint256)": FunctionFragment;
    "transfer(address,uint256,uint256,address)": FunctionFragment;
    "unlock(address,uint256,uint256)": FunctionFragment;
    "unstake(address,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "issue",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedBalanceBy",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lockedBalanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "print",
    values: [string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "projects", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedBalanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakedTotalSupplyOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketsOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedBalanceBy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "print", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "projects", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakedBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedTotalSupplyOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ticketsOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;

  events: {
    "Issue(uint256,string,string,address)": EventFragment;
    "Lock(address,uint256,uint256,address)": EventFragment;
    "Print(address,uint256,uint256,bool,bool,address)": EventFragment;
    "Redeem(address,uint256,uint256,uint256,bool,address)": EventFragment;
    "Stake(address,uint256,uint256,address)": EventFragment;
    "Transfer(address,uint256,address,uint256,address)": EventFragment;
    "Unlock(address,uint256,uint256,address)": EventFragment;
    "Unstake(address,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Issue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Lock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Print"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
}

export type IssueEvent = TypedEvent<
  [BigNumber, string, string, string],
  { projectId: BigNumber; name: string; symbol: string; caller: string }
>;

export type IssueEventFilter = TypedEventFilter<IssueEvent>;

export type LockEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  { holder: string; projectId: BigNumber; amount: BigNumber; caller: string }
>;

export type LockEventFilter = TypedEventFilter<LockEvent>;

export type PrintEvent = TypedEvent<
  [string, BigNumber, BigNumber, boolean, boolean, string],
  {
    holder: string;
    projectId: BigNumber;
    amount: BigNumber;
    convertedTickets: boolean;
    preferUnstakedTickets: boolean;
    controller: string;
  }
>;

export type PrintEventFilter = TypedEventFilter<PrintEvent>;

export type RedeemEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, boolean, string],
  {
    holder: string;
    projectId: BigNumber;
    amount: BigNumber;
    stakedTickets: BigNumber;
    preferUnstaked: boolean;
    controller: string;
  }
>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export type StakeEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  { holder: string; projectId: BigNumber; amount: BigNumber; caller: string }
>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export type TransferEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, string],
  {
    holder: string;
    projectId: BigNumber;
    recipient: string;
    amount: BigNumber;
    caller: string;
  }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type UnlockEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  { holder: string; projectId: BigNumber; amount: BigNumber; caller: string }
>;

export type UnlockEventFilter = TypedEventFilter<UnlockEvent>;

export type UnstakeEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  { holder: string; projectId: BigNumber; amount: BigNumber; caller: string }
>;

export type UnstakeEventFilter = TypedEventFilter<UnstakeEvent>;

export interface ITicketBooth extends BaseContract {
  contractName: "ITicketBooth";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITicketBoothInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOf(
      _holder: string,
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _result: BigNumber }>;

    issue(
      _projectId: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lock(
      _holder: string,
      _projectId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockedBalanceBy(
      _operator: string,
      _holder: string,
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockedBalanceOf(
      _holder: string,
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    print(
      _holder: string,
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _preferUnstakedTickets: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    projects(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      _holder: string,
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _preferUnstaked: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      _holder: string,
      _projectId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakedBalanceOf(
      _holder: string,
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakedTotalSupplyOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ticketsOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupplyOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transfer(
      _holder: string,
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlock(
      _holder: string,
      _projectId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      _holder: string,
      _projectId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  balanceOf(
    _holder: string,
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  issue(
    _projectId: BigNumberish,
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lock(
    _holder: string,
    _projectId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockedBalanceBy(
    _operator: string,
    _holder: string,
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockedBalanceOf(
    _holder: string,
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  print(
    _holder: string,
    _projectId: BigNumberish,
    _amount: BigNumberish,
    _preferUnstakedTickets: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  projects(overrides?: CallOverrides): Promise<string>;

  redeem(
    _holder: string,
    _projectId: BigNumberish,
    _amount: BigNumberish,
    _preferUnstaked: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    _holder: string,
    _projectId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakedBalanceOf(
    _holder: string,
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakedTotalSupplyOf(
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ticketsOf(
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  totalSupplyOf(
    _projectId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transfer(
    _holder: string,
    _projectId: BigNumberish,
    _amount: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlock(
    _holder: string,
    _projectId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    _holder: string,
    _projectId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(
      _holder: string,
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issue(
      _projectId: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lock(
      _holder: string,
      _projectId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockedBalanceBy(
      _operator: string,
      _holder: string,
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedBalanceOf(
      _holder: string,
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    print(
      _holder: string,
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _preferUnstakedTickets: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    projects(overrides?: CallOverrides): Promise<string>;

    redeem(
      _holder: string,
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _preferUnstaked: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      _holder: string,
      _projectId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakedBalanceOf(
      _holder: string,
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakedTotalSupplyOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ticketsOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupplyOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      _holder: string,
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlock(
      _holder: string,
      _projectId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(
      _holder: string,
      _projectId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Issue(uint256,string,string,address)"(
      projectId?: BigNumberish | null,
      name?: null,
      symbol?: null,
      caller?: null
    ): IssueEventFilter;
    Issue(
      projectId?: BigNumberish | null,
      name?: null,
      symbol?: null,
      caller?: null
    ): IssueEventFilter;

    "Lock(address,uint256,uint256,address)"(
      holder?: string | null,
      projectId?: BigNumberish | null,
      amount?: null,
      caller?: null
    ): LockEventFilter;
    Lock(
      holder?: string | null,
      projectId?: BigNumberish | null,
      amount?: null,
      caller?: null
    ): LockEventFilter;

    "Print(address,uint256,uint256,bool,bool,address)"(
      holder?: string | null,
      projectId?: BigNumberish | null,
      amount?: null,
      convertedTickets?: null,
      preferUnstakedTickets?: null,
      controller?: null
    ): PrintEventFilter;
    Print(
      holder?: string | null,
      projectId?: BigNumberish | null,
      amount?: null,
      convertedTickets?: null,
      preferUnstakedTickets?: null,
      controller?: null
    ): PrintEventFilter;

    "Redeem(address,uint256,uint256,uint256,bool,address)"(
      holder?: string | null,
      projectId?: BigNumberish | null,
      amount?: null,
      stakedTickets?: null,
      preferUnstaked?: null,
      controller?: null
    ): RedeemEventFilter;
    Redeem(
      holder?: string | null,
      projectId?: BigNumberish | null,
      amount?: null,
      stakedTickets?: null,
      preferUnstaked?: null,
      controller?: null
    ): RedeemEventFilter;

    "Stake(address,uint256,uint256,address)"(
      holder?: string | null,
      projectId?: BigNumberish | null,
      amount?: null,
      caller?: null
    ): StakeEventFilter;
    Stake(
      holder?: string | null,
      projectId?: BigNumberish | null,
      amount?: null,
      caller?: null
    ): StakeEventFilter;

    "Transfer(address,uint256,address,uint256,address)"(
      holder?: string | null,
      projectId?: BigNumberish | null,
      recipient?: string | null,
      amount?: null,
      caller?: null
    ): TransferEventFilter;
    Transfer(
      holder?: string | null,
      projectId?: BigNumberish | null,
      recipient?: string | null,
      amount?: null,
      caller?: null
    ): TransferEventFilter;

    "Unlock(address,uint256,uint256,address)"(
      holder?: string | null,
      projectId?: BigNumberish | null,
      amount?: null,
      caller?: null
    ): UnlockEventFilter;
    Unlock(
      holder?: string | null,
      projectId?: BigNumberish | null,
      amount?: null,
      caller?: null
    ): UnlockEventFilter;

    "Unstake(address,uint256,uint256,address)"(
      holder?: string | null,
      projectId?: BigNumberish | null,
      amount?: null,
      caller?: null
    ): UnstakeEventFilter;
    Unstake(
      holder?: string | null,
      projectId?: BigNumberish | null,
      amount?: null,
      caller?: null
    ): UnstakeEventFilter;
  };

  estimateGas: {
    balanceOf(
      _holder: string,
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issue(
      _projectId: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lock(
      _holder: string,
      _projectId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockedBalanceBy(
      _operator: string,
      _holder: string,
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedBalanceOf(
      _holder: string,
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    print(
      _holder: string,
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _preferUnstakedTickets: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    projects(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      _holder: string,
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _preferUnstaked: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      _holder: string,
      _projectId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakedBalanceOf(
      _holder: string,
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakedTotalSupplyOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ticketsOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupplyOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      _holder: string,
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlock(
      _holder: string,
      _projectId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      _holder: string,
      _projectId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      _holder: string,
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issue(
      _projectId: BigNumberish,
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lock(
      _holder: string,
      _projectId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockedBalanceBy(
      _operator: string,
      _holder: string,
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedBalanceOf(
      _holder: string,
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    print(
      _holder: string,
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _preferUnstakedTickets: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    projects(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      _holder: string,
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _preferUnstaked: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      _holder: string,
      _projectId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakedBalanceOf(
      _holder: string,
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakedTotalSupplyOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ticketsOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupplyOf(
      _projectId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      _holder: string,
      _projectId: BigNumberish,
      _amount: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlock(
      _holder: string,
      _projectId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      _holder: string,
      _projectId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
