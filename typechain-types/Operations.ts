/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface OperationsInterface extends utils.Interface {
  contractName: "Operations";
  functions: {
    "ClaimHandle()": FunctionFragment;
    "Configure()": FunctionFragment;
    "Issue()": FunctionFragment;
    "Lock()": FunctionFragment;
    "Migrate()": FunctionFragment;
    "PrintPreminedTickets()": FunctionFragment;
    "PrintTickets()": FunctionFragment;
    "Redeem()": FunctionFragment;
    "RenewHandle()": FunctionFragment;
    "SetHandle()": FunctionFragment;
    "SetPayoutMods()": FunctionFragment;
    "SetTerminal()": FunctionFragment;
    "SetTicketMods()": FunctionFragment;
    "SetUri()": FunctionFragment;
    "Stake()": FunctionFragment;
    "Transfer()": FunctionFragment;
    "Unstake()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ClaimHandle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "Configure", values?: undefined): string;
  encodeFunctionData(functionFragment: "Issue", values?: undefined): string;
  encodeFunctionData(functionFragment: "Lock", values?: undefined): string;
  encodeFunctionData(functionFragment: "Migrate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PrintPreminedTickets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PrintTickets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "Redeem", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "RenewHandle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SetHandle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "SetPayoutMods",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SetTerminal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SetTicketMods",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SetUri", values?: undefined): string;
  encodeFunctionData(functionFragment: "Stake", values?: undefined): string;
  encodeFunctionData(functionFragment: "Transfer", values?: undefined): string;
  encodeFunctionData(functionFragment: "Unstake", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ClaimHandle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Configure", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Issue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Migrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PrintPreminedTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PrintTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "RenewHandle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SetHandle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SetPayoutMods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetTerminal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetTicketMods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SetUri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Unstake", data: BytesLike): Result;

  events: {};
}

export interface Operations extends BaseContract {
  contractName: "Operations";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OperationsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ClaimHandle(overrides?: CallOverrides): Promise<[BigNumber]>;

    Configure(overrides?: CallOverrides): Promise<[BigNumber]>;

    Issue(overrides?: CallOverrides): Promise<[BigNumber]>;

    Lock(overrides?: CallOverrides): Promise<[BigNumber]>;

    Migrate(overrides?: CallOverrides): Promise<[BigNumber]>;

    PrintPreminedTickets(overrides?: CallOverrides): Promise<[BigNumber]>;

    PrintTickets(overrides?: CallOverrides): Promise<[BigNumber]>;

    Redeem(overrides?: CallOverrides): Promise<[BigNumber]>;

    RenewHandle(overrides?: CallOverrides): Promise<[BigNumber]>;

    SetHandle(overrides?: CallOverrides): Promise<[BigNumber]>;

    SetPayoutMods(overrides?: CallOverrides): Promise<[BigNumber]>;

    SetTerminal(overrides?: CallOverrides): Promise<[BigNumber]>;

    SetTicketMods(overrides?: CallOverrides): Promise<[BigNumber]>;

    SetUri(overrides?: CallOverrides): Promise<[BigNumber]>;

    Stake(overrides?: CallOverrides): Promise<[BigNumber]>;

    Transfer(overrides?: CallOverrides): Promise<[BigNumber]>;

    Unstake(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  ClaimHandle(overrides?: CallOverrides): Promise<BigNumber>;

  Configure(overrides?: CallOverrides): Promise<BigNumber>;

  Issue(overrides?: CallOverrides): Promise<BigNumber>;

  Lock(overrides?: CallOverrides): Promise<BigNumber>;

  Migrate(overrides?: CallOverrides): Promise<BigNumber>;

  PrintPreminedTickets(overrides?: CallOverrides): Promise<BigNumber>;

  PrintTickets(overrides?: CallOverrides): Promise<BigNumber>;

  Redeem(overrides?: CallOverrides): Promise<BigNumber>;

  RenewHandle(overrides?: CallOverrides): Promise<BigNumber>;

  SetHandle(overrides?: CallOverrides): Promise<BigNumber>;

  SetPayoutMods(overrides?: CallOverrides): Promise<BigNumber>;

  SetTerminal(overrides?: CallOverrides): Promise<BigNumber>;

  SetTicketMods(overrides?: CallOverrides): Promise<BigNumber>;

  SetUri(overrides?: CallOverrides): Promise<BigNumber>;

  Stake(overrides?: CallOverrides): Promise<BigNumber>;

  Transfer(overrides?: CallOverrides): Promise<BigNumber>;

  Unstake(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    ClaimHandle(overrides?: CallOverrides): Promise<BigNumber>;

    Configure(overrides?: CallOverrides): Promise<BigNumber>;

    Issue(overrides?: CallOverrides): Promise<BigNumber>;

    Lock(overrides?: CallOverrides): Promise<BigNumber>;

    Migrate(overrides?: CallOverrides): Promise<BigNumber>;

    PrintPreminedTickets(overrides?: CallOverrides): Promise<BigNumber>;

    PrintTickets(overrides?: CallOverrides): Promise<BigNumber>;

    Redeem(overrides?: CallOverrides): Promise<BigNumber>;

    RenewHandle(overrides?: CallOverrides): Promise<BigNumber>;

    SetHandle(overrides?: CallOverrides): Promise<BigNumber>;

    SetPayoutMods(overrides?: CallOverrides): Promise<BigNumber>;

    SetTerminal(overrides?: CallOverrides): Promise<BigNumber>;

    SetTicketMods(overrides?: CallOverrides): Promise<BigNumber>;

    SetUri(overrides?: CallOverrides): Promise<BigNumber>;

    Stake(overrides?: CallOverrides): Promise<BigNumber>;

    Transfer(overrides?: CallOverrides): Promise<BigNumber>;

    Unstake(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    ClaimHandle(overrides?: CallOverrides): Promise<BigNumber>;

    Configure(overrides?: CallOverrides): Promise<BigNumber>;

    Issue(overrides?: CallOverrides): Promise<BigNumber>;

    Lock(overrides?: CallOverrides): Promise<BigNumber>;

    Migrate(overrides?: CallOverrides): Promise<BigNumber>;

    PrintPreminedTickets(overrides?: CallOverrides): Promise<BigNumber>;

    PrintTickets(overrides?: CallOverrides): Promise<BigNumber>;

    Redeem(overrides?: CallOverrides): Promise<BigNumber>;

    RenewHandle(overrides?: CallOverrides): Promise<BigNumber>;

    SetHandle(overrides?: CallOverrides): Promise<BigNumber>;

    SetPayoutMods(overrides?: CallOverrides): Promise<BigNumber>;

    SetTerminal(overrides?: CallOverrides): Promise<BigNumber>;

    SetTicketMods(overrides?: CallOverrides): Promise<BigNumber>;

    SetUri(overrides?: CallOverrides): Promise<BigNumber>;

    Stake(overrides?: CallOverrides): Promise<BigNumber>;

    Transfer(overrides?: CallOverrides): Promise<BigNumber>;

    Unstake(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ClaimHandle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Configure(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Issue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Lock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Migrate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PrintPreminedTickets(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PrintTickets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Redeem(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RenewHandle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SetHandle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SetPayoutMods(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SetTerminal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SetTicketMods(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SetUri(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Stake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Transfer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Unstake(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
